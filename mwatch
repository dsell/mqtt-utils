#!/usr/bin/python

# mwatch - Watches topics change from an MQTT broker
#
# By Dennis Sell
#
# Inspired by subcurses written by Andrew Elwell <Andrew.Elwell@ivec.org>




__author__ = "Dennis Sell"
__copyright__ = "Copyright (C) Dennis Sell"


#BUGS
# resizing terminal crashes.  Possibly some curses/mosquitto interaction.


import os
import sys
import getopt
import mosquitto
import curses
from curses.ascii import isprint
import time
import datetime
import mqttcore


version_number = 0.7
topiclist = []
count = []
numtopics = 0
rxcount = 0
pos = 0
col = 0
topic_col = 0
topic_size = 65
retained_col = topic_size
qos_col = topic_size
count_col = topic_size
timestamp_col = topic_size
message_col = topic_size


def usage():
    print "usage: mwatch [options]"  #[hostname[:port]] [topics]" 
    print "Watch topics change from an MQTT broker."
    print 
    print "   -u --hostname HOSTNAME set hostname for broker (default localhost)"
    print "   -p --port PORT         set port for mqtt broker (default 1883)"
    print "   -t --topics TOPICS     set topics to watch (default /#)"
    print "   -q --qos               show QOS as recieved"
    print "   -r --retained          show retained status"
    print "   -c --count             show count of receptions"
    print "   -s --timestamp         show timestamp of message reception"
    print "   -a --all               show all data fields"
    print "   -x --hex               show message in hex"
    print "   -h --help              show this help information"
    print "   -v --version           show version information"
    print "By Dennis Sell -- 2013"


def version():
    print "version: " + str(version_number)


def show_help():
    help_cols = curses.COLS/2
    help_lines = curses.LINES/2
    help_win = curses.newwin(24, 50, help_lines-12, help_cols-25)
    help_win.box()
    help_win.addstr(1, 1, "Key Commands", curses.A_UNDERLINE)
    help_win.addstr(3, 1, "[Home]        - Jump to top left")
    help_win.addstr(4, 1, "[END]         - Jump to bottom of list")
    help_win.addstr(5, 1, "b             - Jump to begining of line")
    help_win.addstr(6, 1, "e             - Jump to end of line")
    help_win.addstr(7, 1, "[Right Arrow] - Scroll to right")
    help_win.addstr(8, 1, "[Left Arrow]  - Scroll to left")
    help_win.addstr(9, 1, "[Up Arrow]    - Scroll up")
    help_win.addstr(10, 1, "[Down Arrow]  - Scroll down")
    help_win.addstr(11, 1, "[Page Up]     - Page up")
    help_win.addstr(12, 1, "[Page Down]   - Page down")
    help_win.addstr(14, 1, "Retained flag == True implies the message was")
    help_win.addstr(15, 1, "sent before mwatch connected to the broker.  ")
    help_win.addstr(17, 1, "q - To exit help.")
    help_win.noutrefresh()
    curses.doupdate()
    while True:
        key = stdscr.getch()
        if key == ord("q"):
            break
    help_win.erase()
    del help_win
    stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
    header_txt.refresh(0, 0, 2, 1, 2, curses.COLS-3)
    stdscr.nooutrefresh()
    curses.doupdate()


def on_connect(mosq, userdata, rc):
    stdscr.addstr(curses.LINES-1,0,"Connected to %s" % broker)
    stdscr.addstr(0,15,"Sunscribed to %s" % topics, curses.A_REVERSE)
    stdscr.noutrefresh()
    curses.doupdate()


def isprintable(v):
    ret = True
    for char in v:
        if not curses.ascii.isprint(char):    
            ret = False
    return ret


def printable(input):
    return ''.join(char for char in input if isprint(char))


def on_message(mosq, userdata, msg):
    global numtopics
    global rxcount
    global retained_flag
    global timestamp_flag

    rxcount = rxcount + 1
    stdscr.addstr(0,80,"Msg count %s" % rxcount, curses.A_REVERSE)
    if msg.topic not in topiclist:
        topiclist.append(msg.topic)
        numtopics = numtopics + 1
        count.append(0)
        stdscr.addstr(0,60,"Topic count %s" % numtopics, curses.A_REVERSE)
    offset = topiclist.index(msg.topic) 
    count[offset] = count[offset] + 1
    stats_txt.move(offset, message_col)
    stats_txt.clrtoeol()
    stats_txt.addstr(offset, topic_col, msg.topic)
    if isprintable(msg.payload) and not hex_flag:
        stats_txt.addstr(offset, message_col, msg.payload[0:1900])
    else:
        v = " ".join([hex(ord(a)) for a in msg.payload])  #Does individual bytes.
        stats_txt.addstr(offset, message_col, "####  NON-ALPHANUMERIC  #### --> 0x" + msg.payload.encode('hex')[0:1900])
    if msg.retain:
        retained_value = "True "
    else:
        retained_value = "False"
    if retained_flag:
        stats_txt.addstr(offset, retained_col, retained_value)
    if qos_flag:
        stats_txt.addstr(offset, qos_col, str(msg.qos))
    if count_flag:
        stats_txt.addstr(offset, count_col, str(count[offset]))
    if timestamp_flag:
        stats_txt.addstr(offset, timestamp_col, str(datetime.datetime.now()))
    stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
    curses.doupdate()


def getTerminalSize():
    """
    returns (lines:int, cols:int)
    """
    import os, struct
    def ioctl_GWINSZ(fd):
        import fcntl, termios
        return struct.unpack("hh", fcntl.ioctl(fd, termios.TIOCGWINSZ, "1234"))
    # try stdin, stdout, stderr
    for fd in (0, 1, 2):
        try:
            return ioctl_GWINSZ(fd)
        except:
            pass
    # try os.ctermid()
    try:
        fd = os.open(os.ctermid(), os.O_RDONLY)
        try:
            return ioctl_GWINSZ(fd)
        finally:
            os.close(fd)
    except:
        pass
    # try `stty size`
    try:
        return tuple(int(x) for x in os.popen("stty size", "r").read().split())
    except:
        pass
    # try environment variables
    try:
        return tuple(int(os.getenv(var)) for var in ("LINES", "COLUMNS"))
    except:
        pass
    # i give up. return default.
    return (25, 80)


try:
    opts, args = getopt.getopt(sys.argv[1:], 'u:p:t:rqcsaxhv', ['hostname=', 'port=', 'topics=', 'retained', 'qos', 'count', 'timestamp', 'all', 'hex', 'help', 'version'])
except getopt.GetoptError as err:
    print str(err)
    usage()
    sys.exit(2)


# defaults
broker = "127.0.0.1"
port = 1883
topics = "/#"
retained_flag = False
qos_flag = False
count_flag = False
timestamp_flag = False
hex_flag = False

for opt, arg in opts:
    if opt in ('-h', '--help'):
        usage()
        sys.exit(2)
    if opt in ('-v', '--version'):
        version()
        sys.exit(2)
    elif opt in ('-u', '--hostname'):
        broker = arg
    elif opt in ('-p', '--port'):
        port = arg
    elif opt in ('-t', '--topics'):
        topics = arg
    elif opt in ('-r', '--retained'):
        retained_flag = True
    elif opt in ('-q', '--qos'):
        qos_flag = True
    elif opt in ('-c', '--count'):
        count_flag = True
    elif opt in ('-s', '--timestamp'):
        timestamp_flag = True
    elif opt in ('-a', '--all'):
        retained_flag = True
        qos_flag = True
        count_flag = True
        timestamp_flag = True
    elif opt in ('-x', '--hex'):
        hex_flag = True
    else:
        usage()
        sys.exit(2)


# minitialize mosquitto, connect, and subscribe
client = mosquitto.Mosquitto()
client.on_message = on_message
client.on_connect = on_connect
client.connect(broker)
if qos_flag:
    qos = 2
else:
    qos = 0
client.subscribe(topics, qos=qos)

# initialize curses
stdscr = curses.initscr()
if curses.COLS < 95:
    curses.endwin()
    print "mwatch requires a minimum terminal width of 95 columns."    
    sys.exit(2)
if curses.LINES < 7:
    curses.endwin()
    print "mwatch requires a minimum terminal heigth of 7 rows."    
    sys.exit(2)
stdscr.nodelay(1)
curses.curs_set(0)
if curses.has_colors():
    curses.start_color()
curses.cbreak()
curses.noecho()
stdscr.keypad(1)


# draw basic screen
stdscr.addstr("MQTT watch ", curses.A_REVERSE)
stdscr.chgat(-1,curses.A_REVERSE)
stdscr.addstr(curses.LINES-1,curses.COLS-57,"page-up, page-dn, cursor arrows, ? for help, q to Quit")
page = curses.LINES - 3
stats = curses.newwin(curses.LINES-2,curses.COLS,1,0)
stats.box()
header_txt = curses.newpad(1,2000)
stats_txt = curses.newpad(2000,2000)
stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
stdscr.noutrefresh()
stats.noutrefresh()


header_txt.addstr(0, topic_col+1, "TOPIC", curses.A_UNDERLINE)
if retained_flag:
    qos_col = qos_col + 10
    timestamp_col = timestamp_col + 10
    count_col = count_col + 10
    message_col = message_col + 10
    if curses.COLS > retained_col + 2:
        header_txt.addstr(0, retained_col+1, "RETAINED", curses.A_UNDERLINE)
if qos_flag:
    timestamp_col = timestamp_col + 5
    count_col = count_col + 5
    message_col = message_col + 5
    header_txt.addstr(0, qos_col+1, "QOS", curses.A_UNDERLINE)
if count_flag:
    timestamp_col = timestamp_col + 7
    message_col = message_col + 7
    header_txt.addstr(0, count_col+1, "COUNT", curses.A_UNDERLINE)
if timestamp_flag:
    message_col = message_col + 28
    header_txt.addstr(0, timestamp_col+1, "RECEIVED TIMESTAMP", curses.A_UNDERLINE)
if curses.COLS > message_col + 10:
    header_txt.addstr(0, message_col+1, "MESSAGE", curses.A_UNDERLINE)
header_txt.refresh(0, 0, 2, 1, 2, curses.COLS-3)
stats.noutrefresh()
curses.doupdate()

# main loop
while client.loop(0) == 0:
    key = stdscr.getch()
    if key == -1:
        pass
    elif key == ord("q"):
        break
    elif key == ord("?"):
        show_help()
    elif key == curses.KEY_DOWN:
        pos = pos + 1
        if pos > numtopics:
            pos = numtopics
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    elif key == curses.KEY_UP:
        pos = pos - 1
        if pos < 0:
            pos = 0
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    elif key == curses.KEY_NPAGE:
        pos = pos + page - 2
        if pos > numtopics:
            pos = numtopics
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    elif key == curses.KEY_PPAGE:
        pos = pos - page + 2
        if pos < 0:
            pos = 0
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    elif key == curses.KEY_LEFT:
        col = col - 1
        if col < 0:
            col = 0
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    elif key == curses.KEY_RIGHT:
        col = col + 1
        if col > 2003-curses.COLS:
            col = 2003-curses.COLS
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    elif key == curses.KEY_HOME:
        pos = 0
        col = 0
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    elif key == curses.KEY_END:
        pos = numtopics - page + 4
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    elif key == ord("b"):
        col = 0
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    elif key == ord("e"):
        col = 2003 - curses.COLS
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    elif key == curses.KEY_RESIZE:    #Resizing the terminal screen crashes this program.  
        l, c = getTerminalSize()    #It seems to be something to do with calling the mosquitto library in the above while loop.  
        if c > 50:                  #Redrawing belongs here if the problem gets solved.
            stdscr.addstr(0, curses.COLS-20, "Col: " + str(c) + "  Lines: " + str(l))
    l, c = getTerminalSize()
    if c > 120:                 
        stdscr.addstr(0,c - 27,"%s" % str(datetime.datetime.now()), curses.A_REVERSE)
    pass


# clean up terminal settings
curses.nocbreak()
stdscr.keypad(0)
curses.echo()
curses.endwin()


