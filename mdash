#!/usr/bin/python

# mdash - Watches $SYS topics from an MQTT broker and presents them in a dashboard view.
#
# By Dennis Sell
#
# 



#BUGS
# resizing terminal crashes.  Possibly some curses/mosquitto interaction.


import os
import sys
import getopt
import mosquitto
import curses
from curses.ascii import isprint
import time
import datetime

version_number = 0.5
topiclist = []
count = []
numtopics = 0
rxcount = 0
pos = 0
col = 0
topic_col = 0
topic_size = 60
retained_col = topic_size
qos_col = topic_size
count_col = topic_size
timestamp_col = topic_size
message_col = topic_size
items = []

class item:
    def __init__(self, topic, y, x, length, rl = 'r'):
        self.topic = topic
        self.y = y
        self.x = x
        self.length = length
        self.rl = rl


def usage():
    print "usage: mdash [options]"  #[hostname[:port]] [topics]" 
    print "Watch topics change from an MQTT broker."
    print 
    print "   -u --hostname HOSTNAME set hostname for broker (default localhost)"
    print "   -p --port PORT         set port for mqtt broker (default 1883)"
    print "   -h --help              show this help information"
    print "   -v --version           show version information"
    print "By Dennis Sell -- 2013"


def version():
    print "version: " + str(version_number)


def show_help():
    help_cols = curses.COLS/2
    help_lines = curses.LINES/2
    help_win = curses.newwin(24, 50, help_lines-12, help_cols-25)
    help_win.box()
    help_win.addstr(1, 1, "Key Commands", curses.A_UNDERLINE)
    help_win.addstr(3, 1, "[Home]        - Jump to top left")
    help_win.addstr(4, 1, "b             - Jump to begining of line")
    help_win.addstr(5, 1, "e             - Jump to end of line")
    help_win.addstr(6, 1, "[Right Arrow] - Scroll to right")
    help_win.addstr(7, 1, "[Left Arrow]  - Scroll to left")
    help_win.addstr(8, 1, "[Up Arrow]    - Scroll up")
    help_win.addstr(9, 1, "[Down Arrow]  - Scroll down")
    help_win.addstr(10, 1, "[Page Up]     - Page up")
    help_win.addstr(11, 1, "[Page Down]   - Page down")
    help_win.addstr(16, 1, "q - To exit help.")
    help_win.noutrefresh()
    curses.doupdate()
    while True:
        key = stdscr.getch()
        if key == ord("q"):
            break
    help_win.erase()
    del help_win
    stats.nooutrefresh()
    stdscr.nooutrefresh()
    curses.doupdate()


def on_connect(mosq, userdata, rc):
    stdscr.addstr(curses.LINES-1,0,"Connected to %s" % broker)
    stdscr.noutrefresh()
    curses.doupdate()


def on_message(mosq, userdata, msg):
    global numtopics
    global rxcount
    global retained_flag
    global timestamp_flag

    for i in items:
        if i.topic == msg.topic:
            if i.length + 1 > len(msg.payload) and i.rl == 'r':
                stdscr.addstr(i.y, i.x-1, str(msg.payload).rjust(i.length))        
    if msg.topic == "$SYS/broker/uptime":
            t = msg.payload.split(" ")
            uptime = datetime.timedelta(seconds=int(t[0]))
            uptime_text = str(uptime).rjust(12)
            stdscr.addstr(14,other_col+other_tab+2, uptime_text)
    curses.doupdate()


def getTerminalSize():
    """
    returns (lines:int, cols:int)
    """
    import os
    def ioctl_GWINSZ(fd):
        import fcntl, termios
        return struct.unpack("hh", fcntl.ioctl(fd, termios.TIOCGWINSZ, "1234"))
    # try stdin, stdout, stderr
    for fd in (0, 1, 2):
        try:
            return ioctl_GWINSZ(fd)
        except:
            pass
    # try os.ctermid()
    try:
        fd = os.open(os.ctermid(), os.O_RDONLY)
        try:
            return ioctl_GWINSZ(fd)
        finally:
            os.close(fd)
    except:
        pass
    # try `stty size`
    try:
        return tuple(int(x) for x in os.popen("stty size", "r").read().split())
    except:
        pass
    # try environment variables
    try:
        return tuple(int(os.getenv(var)) for var in ("LINES", "COLUMNS"))
    except:
        pass
    # i give up. return default.
    return (25, 80)


try:
    opts, args = getopt.getopt(sys.argv[1:], 'u:p:hv', ['hostname=', 'port=', 'help', 'version'])
except getopt.GetoptError as err:
    print str(err)
    usage()
    sys.exit(2)


# defaults
broker = "127.0.0.1"
port = 1883
topics = "$SYS/#"

for opt, arg in opts:
    if opt in ('-h', '--help'):
        usage()
        sys.exit(2)
    if opt in ('-v', '--version'):
        version()
        sys.exit(2)
    elif opt in ('-u', '--hostname'):
        broker = arg
    elif opt in ('-p', '--port'):
        port = arg
    else:
        usage()
        sys.exit(2)


# minitialize mosquitto, connect, and subscribe
client = mosquitto.Mosquitto()
client.on_message = on_message
client.on_connect = on_connect
client.connect(broker)
client.subscribe(topics)

# initialize curses
stdscr = curses.initscr()
if curses.COLS < 95:
    curses.endwin()
    print "mwatch requires a minimum terminal width of 95 columns."    
    sys.exit(2)
if curses.LINES < 7:
    curses.endwin()
    print "mwatch requires a minimum terminal heigth of 7 rows."    
    sys.exit(2)
stdscr.nodelay(1)
curses.curs_set(0)
if curses.has_colors():
    curses.start_color()
curses.cbreak()
curses.noecho()
stdscr.keypad(1)


# draw basic screen
stdscr.addstr("MQTT Dashboard ", curses.A_REVERSE)
stdscr.addstr(curses.LINES-1,curses.COLS-37,"? for help, q to Quit")
stats = curses.newwin(curses.LINES-2,curses.COLS,1,0)
stats.box()
stdscr.noutrefresh()
stats.noutrefresh()
clients_col = 3
clients_tab = 10
messages_col = 32
messages_tab = 10
other_col = 62
other_tab = 12
sent1m_col = 18
rec1m_col = 32
sent5m_col = 41
rec5m_col = 55
sent15m_col = 64
rec15m_col = 79
senttot_col = 89
rectot_col = 105


stdscr.addstr(3, 1, "Version:", curses.A_UNDERLINE)
stdscr.addstr(5, 1, "Load:                 Per 1 Min.             Per 5 Min.             Per 15 Min.                  Total")
stdscr.addstr(6, 1, "                    Sent      Received     Sent      Received     Sent       Received        Sent      Received", curses.A_UNDERLINE)
stdscr.addstr(7, 1, "Bytes:")
stdscr.addstr(8, 1, "Messages:")
stdscr.addstr(9, 1, "Published:")
stdscr.addstr(10, 1, "Connections:")
stdscr.addstr(11, 1, "Sockets:")
stdscr.addstr(13, 1, "Clients:")
stdscr.addstr(14, clients_col, "Active:")
stdscr.addstr(15, clients_col, "Inactive:")
stdscr.addstr(16, clients_col, "Total:")
stdscr.addstr(17, clients_col, "Expired:")
stdscr.addstr(18, clients_col, "Maximum:")
stdscr.addstr(13, 30, "Messages:")
stdscr.addstr(14, messages_col, "Retained:")
stdscr.addstr(15, messages_col, "Stored:")
stdscr.addstr(16, messages_col, "Dropped:")
stdscr.addstr(17, messages_col, "Inflight:")
stdscr.addstr(18, messages_col, "Subscrip.:")
stdscr.addstr(13, 60, "Other:")
stdscr.addstr(14, other_col, "Uptime:")
stdscr.addstr(15, other_col, "Heap Cur.:")
stdscr.addstr(16, other_col, "Heap Max.:")
stdscr.addstr(20, 1, "Log:")
stats.noutrefresh()
curses.doupdate()

items.append(item("$SYS/broker/version", 3, 10, 25))
items.append(item("$SYS/broker/timestamp", 3, 38, 25))
items.append(item("$SYS/broker/changeset", 3, 67, 25))


#items.append(item("$SYS/broker/publish/bytes/received", 7, rectot_col, 8))
#items.append(item("$SYS/broker/publish/bytes/sent", 7, senttot_col, 8))

items.append(item("$SYS/broker/load/bytes/received/1min", 7, rec1m_col, 8))
items.append(item("$SYS/broker/load/bytes/received/5min", 7, rec5m_col, 8))
items.append(item("$SYS/broker/load/bytes/received/15min", 7, rec15m_col, 8))
items.append(item("$SYS/broker/load/bytes/sent/1min", 7, sent1m_col, 8))
items.append(item("$SYS/broker/load/bytes/sent/5min", 7, sent5m_col, 8))
items.append(item("$SYS/broker/load/bytes/sent/15min", 7, sent15m_col, 8))
items.append(item("$SYS/broker/bytes/received", 7, rectot_col, 8))
items.append(item("$SYS/broker/bytes/sent", 7, senttot_col, 10))

items.append(item("$SYS/broker/load/messages/received/1min", 8, rec1m_col, 8))
items.append(item("$SYS/broker/load/messages/received/5min", 8, rec5m_col, 8))
items.append(item("$SYS/broker/load/messages/received/15min", 8, rec15m_col, 8))
items.append(item("$SYS/broker/load/messages/sent/1min", 8, sent1m_col, 8))
items.append(item("$SYS/broker/load/messages/sent/5min", 8, sent5m_col, 8))
items.append(item("$SYS/broker/load/messages/sent/15min", 8, sent15m_col, 8))
items.append(item("$SYS/broker/messages/received", 8, rectot_col, 8))
items.append(item("$SYS/broker/messages/sent", 8, senttot_col, 10))

items.append(item("$SYS/broker/load/publish/received/1min", 9, rec1m_col, 8))
items.append(item("$SYS/broker/load/publish/received/5min", 9, rec5m_col, 8))
items.append(item("$SYS/broker/load/publish/received/15min", 9, rec15m_col, 8))
items.append(item("$SYS/broker/load/publish/sent/1min", 9, sent1m_col, 8))
items.append(item("$SYS/broker/load/publish/sent/5min", 9, sent5m_col, 8))
items.append(item("$SYS/broker/load/publish/sent/15min", 9, sent15m_col, 8))
items.append(item("$SYS/broker/publish/messages/received", 9, rectot_col, 8))
items.append(item("$SYS/broker/publish/messages/sent", 9, senttot_col, 10))

items.append(item("$SYS/broker/load/connections/1min", 10, sent1m_col+5, 8))
items.append(item("$SYS/broker/load/connections/5min", 10, sent5m_col+5, 8))
items.append(item("$SYS/broker/load/connections/15min", 10, sent15m_col+5, 8))

items.append(item("$SYS/broker/load/sockets/1min", 11, sent1m_col+5, 8))
items.append(item("$SYS/broker/load/sockets/5min", 11, sent5m_col+5, 8))
items.append(item("$SYS/broker/load/sockets/15min", 11, sent15m_col+5, 8))

items.append(item("$SYS/broker/retained messages/count", 14, messages_col+messages_tab, 8))
items.append(item("$SYS/broker/messages/stored", 15, messages_col+messages_tab, 8))
items.append(item("$SYS/broker/messages/dropped", 16, messages_col+messages_tab, 8))
items.append(item("$SYS/broker/messages/inflight", 17, messages_col+messages_tab, 8))
items.append(item("$SYS/broker/subscriptions/count", 18, messages_col+messages_tab, 8))

items.append(item("$SYS/broker/clients/active", 14, clients_col+clients_tab, 8))
items.append(item("$SYS/broker/clients/inactive", 15, clients_col+clients_tab, 8))
items.append(item("$SYS/broker/clients/total", 16, clients_col+clients_tab, 8))
items.append(item("$SYS/broker/clients/expired", 17,clients_col+clients_tab, 8))
items.append(item("$SYS/broker/clients/maximum", 18, clients_col+clients_tab, 8))

items.append(item("$SYS/broker/heap/current size", 15, other_col+other_tab, 10))
items.append(item("$SYS/broker/heap/maximum size", 16, other_col+other_tab, 10))


# main loop
while client.loop(0) == 0:
    key = stdscr.getch()
    if key == ord("q"):
        break
    if key == ord("?"):
        show_help()
    if key == curses.KEY_DOWN:
        pos = pos + 1
        if pos > numtopics:
            pos = numtopics
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    if key == curses.KEY_UP:
        pos = pos - 1
        if pos < 0:
            pos = 0
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    if key == curses.KEY_NPAGE:
        pos = pos + page - 2
        if pos > numtopics:
            pos = numtopics
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    if key == curses.KEY_PPAGE:
        pos = pos - page + 2
        if pos < 0:
            pos = 0
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    if key == curses.KEY_LEFT:
        col = col - 1
        if col < 0:
            col = 0
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    if key == curses.KEY_RIGHT:
        col = col + 1
        if col > 2003-curses.COLS:
            col = 2003-curses.COLS
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    if key == curses.KEY_HOME:
        pos = 0
        col = 0
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    if key == ord("b"):
        col = 0
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    if key == ord("e"):
        col = 2003 - curses.COLS
        stats_txt.refresh(pos, col, 3,2, page,curses.COLS-3)
        header_txt.refresh(0, col, 2, 1, 2, curses.COLS-3)
        curses.doupdate()
    if key == curses.KEY_RESIZE:    #Resizing the terminal screen crashes this program.  
        l, c = getTerminalSize()    #It seems to be something to do with calling the mosquitto library in the above while loop.  
        if c > 50:                  #Redrawing belongs here if the problem gets solved.
            stdscr.addstr(0, curses.COLS-20, "Col: " + str(c) + "  Lines: " + str(l))
    l, c = getTerminalSize()
    if c > 120:                 
        stdscr.addstr(0,c - 27,"%s" % str(datetime.datetime.now()), curses.A_REVERSE)
    pass


# clean up terminal settings
curses.nocbreak()
stdscr.keypad(0)
curses.echo()
curses.endwin()

