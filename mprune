#!/usr/bin/python

# mprune - Prunes a topic tree of retained messages in an MQTT broker
#
# By Dennis Sell
#
#


__author__ = "Dennis Sell"
__copyright__ = "Copyright (C) Dennis Sell"


import sys
import signal
import getopt
import mosquitto


topiclist = []
broker = "127.0.0.1"
port = 1883
topics = "/#"


def usage():
    print "usage: mprune [options]"  #[hostname[:port]] [topics]" 
    print "Delete retained topics from an MQTT broker."
    print 
    print "   -u --hostname HOSTNAME set hostname for broker (default localhost)"
    print "   -p --port PORT         set port for mqtt broker (default 1883)"
    print "   -t --topic TOPIC       set topic tree to delete"
    print "   -h --help              show this help information"
    print "   -v --version           show version information"
    print "By Dennis Sell -- 2013"


def on_connect(mosq, userdata, rc):
    print "Connected to ", broker

def on_message(mosq, userdata, msg):
    if msg.topic not in topiclist and msg.retain:
        topiclist.append(msg.topic)


try:
    opts, args = getopt.getopt(sys.argv[1:], 'u:p:t:hv', ['hostname=', 'port', 'topic', 'help', 'version'])
except getopt.GetoptError as err:
    print str(err)
    usage()
    sys.exit(2)


for opt, arg in opts:
    if opt in ('-h', '--help'):
        usage()
        sys.exit(2)
    if opt in ('-v', '--version'):
        version()
        sys.exit(2)
    elif opt in ('-u', '--hostname'):
        broker = arg
    elif opt in ('-p', '--port'):
        port = arg
    elif opt in ('-t', '--topic'):
        topics = arg
    else:
        usage()
        sys.exit(2)

client = mosquitto.Mosquitto()
client.on_message = on_message
client.on_connect = on_connect
client.connect(broker)
client.subscribe(topics)

def alarm_handler(signal, frame):
    collectstate = False
    flushstate = False

signal.signal(signal.SIGALRM, alarm_handler)
signal.alarm(5) # generate SIGALRM after 5 secs

collect_state = True
print "Collecting topics"
while collect_state:
    client.loop(0)
    pass

client.unsubscribe(topics)
for t in topiclist:
    print "Erasing topic: ", t
    client.publish(t, "", retain = True)    
    client.loop(10)

signal.alarm(2) # generate SIGALRM after 2 secs

flush_state = True
while flush_state:
    client.loop()


